// clean --refresh-dependencies build
// -PReleaseBuild 
apply plugin: 'java'
apply plugin: 'maven'

// MAJOR VERSION - Manually set
//----------------------
ext{
	majorNumber = 4
}
//----------------------


ant.importBuild 'buildAnt.xml'
ant.importBuild 'gource.xml'
ant.importBuild 'Copyright.xml'
ant.importBuild 'ikvm.xml'
gource.group "Git"
makefilm.group "Git"
ikvm.group "Git"
AddCopyRightToSource.group "Build"

apply from: 'gradle/version.gradle'
apply from: 'gradle/tasks.gradle'
apply plugin: 'jacoco'
apply plugin: 'eclipse'
apply plugin: 'idea'

apply plugin: "com.github.kt3k.coveralls"
apply from: 'gradle/mavencentral.gradle'
//apply from: 'gradle/artifactory.gradle'



idea {
	project {
		// jdkName = '1.7'
		// languageLevel = '1.7'
	}
}

repositories {
	jcenter()
	mavenCentral()
}

test {
	// enable TestNG support (default is JUnit)
	useJUnit {
		dependencies {
			compile(group: 'junit', name: 'junit', version: '[4,)')
		}
	}
}

buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '[2,)')
		classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3"
	}
}

artifacts { 
	archives buildCoreJar16, buildCoreJar17, buildCoreJar18, buildFullJar, buildSourceJar, buildMinCoreJar, buildJavadoc
}

test {
	testLogging {
		events "failed"
		exceptionFormat "short"
		showStackTraces	true
		showStandardStreams true
		showCauses true
	}
}

jacoco.toolVersion = "0.7.+"

jacocoTestReport {
	group = "Reporting"
	description = "Generate Jacoco coverage reports after running tests."
	executionData = files("${buildDir}/jacoco/test.exec")
	reports {
		xml {
			enabled = true
			//Following value is a file
			//destination = new File("${buildDir}/jacoco/jacoco.xml")
			//build/reports/jacoco/test/jacocoTestReport.xml
		}
		csv{
			destination = new File("${buildDir}/jacoco/report.csv")
			enabled = true
		}
		html {
			enabled = true
			//Following value is a folder
			destination = new File("${buildDir}/jacoco/html")
		}
	}
	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: ['**/javafx/**'])
		})
	}
}

if (project.hasProperty('branch')) {
	new ProcessBuilder("git", "checkout", findProperty('branch')).start()
}

test.finalizedBy jacocoTestReport

sourceSets.main.output.classesDir 'build/classes/main'

sourceCompatibility = 1.8
targetCompatibility = 1.8

defaultTasks 'test', 'jacocoTestReport', 'buildFullJar'

