// -PlectureBuild -Pjenkins clean --refresh-dependencies build artifactoryPublish
// gradlew clean test build jar build javadocJar build fatJar
// gradlew clean test build jar build javadocJar build fatJar -PNetworkParserFX 
// gradlew javadoc all
apply plugin: 'java'
apply plugin: 'maven'
apply from: 'gradle/version.gradle'
apply from: 'gradle/tasks.gradle'

// only for jenkins
if(project.hasProperty('jenkins')) {
	//Artifactory
	apply from: 'gradle/artifactory.gradle'
	

	apply plugin: 'jacoco'
	
	jacoco {
		toolVersion = "0.7.0.201403182114"
	}
	task codeCoverageReport(type: JacocoReport) {
		fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
		sourceSets sourceSets.main
		reports {
			xml.enabled true
			html.enabled true
			html.destination "${buildDir}/reports/jacoco"
			csv.enabled false
		}
	}
} else {
	apply from: 'gradle/ide.gradle'
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '2.2.4')
    }
}

repositories {
	mavenCentral()
	//Artifactory
	if(project.hasProperty('JarName')){ // It is NetworkParserFX
		if(project.hasProperty('jenkins')) { // Its run on Jenkins
			// NetworkParser
			if(project.hasProperty('lectureBuild')) {
				maven { url "https://se.cs.uni-kassel.de/artifactory/lecture" }
			}else{
				maven { url "https://se.cs.uni-kassel.de/artifactory/libs-snapshot-local" }
			}
		}else {
			mavenLocal()
		}
	}
}
dependencies {
	testCompile group: 'junit', name: 'junit', version: '4.+'
}

if(project.hasProperty('JarName')){
	apply from: 'gradle/'+project.getProperty('JarName')+'.gradle'
	project.archivesBaseName = project.getProperty('JarName')
} else {
	apply from: 'gradle/NetworkParser.gradle'
}
