
public class TableComponent extends Composite implements Listener, PropertyChangeListener {
	private Cursor defaultCursor = new Cursor(Display.getDefault(), SWT.CURSOR_ARROW);
	private Cursor handCursor = new Cursor(Display.getDefault(), SWT.CURSOR_HAND);
	private TableItem activeItem;

	protected TableViewerComponent tableViewer;
	protected TableViewerComponent fixedTableViewerLeft;

	private boolean isToolTip;
	private Composite tableComposite;
	private TableSyncronizer tableSyncronizer;

	private Menu mnuColumns;

	protected int additionKey;
	private Menu headerMenu;
	private SashForm sashForm;
	protected String[] columnAttr;
//	private long lastUpdate;
	
	public TableColumnView updatePosition(GUIPosition pos, Point pt) {
		int position = -1;
		int index = -1;
		Table table = getTable(pos);
		if (table != null) {
			if (table.getItemCount() > 0) {
				TableItem item = table.getItem(0);
				for (int i = 0; i < item.getParent().getColumnCount(); i++) {
					Rectangle rect = item.getBounds(i);
					TableColumnView tableColumnView = columns.get(i);
					if (tableColumnView != null) {
						tableColumnView.setPosition(rect.x, rect.width);
						if (pt != null && rect.contains(pt)) {
							position = rect.x;
							index = i;
						}
					}
				}
			}
		}
		if (position >= 0) {
			return columns.get(index);
		}
		return null;
	}

	public int getColumn(TableColumnView view) {
		for (int i = 0; i < columns.size(); i++) {
			if (columns.get(i) == view) {
				return i;
			}
		}
		return -1;
	}

	public TableColumnView getNextColumn(TableColumnView view) {
		TableColumnView result = null;
		int found = 0;
		for (TableColumnView column : columns) {
			if (column.getX() > view.getX()) {
				if (found == 0 || column.getX() < found) {
					result = column;
					found = column.getX();
				}
			}
		}
		return result;
	}

	public Table getTable(GUIPosition browserId) {
		if (browserId.equals(GUIPosition.WEST)) {
			if (fixedTableViewerLeft != null) {
				return fixedTableViewerLeft.getTable();
			}
			return null;
		}
		if (tableViewer != null) {
			return tableViewer.getTable();
		}
		return null;
	}

	public void removeColumn(Column column) {
		TableColumnView[] array = this.columns
				.toArray(new TableColumnView[this.columns.size()]);
		for (TableColumnView item : array) {
			if (item.getColumn().equals(column)) {
				removeColumn(item);
			}
		}
		if (getParent() instanceof PropertyChangeListener) {
			((PropertyChangeListener) getParent())
					.propertyChange(new PropertyChangeEvent(this,
							PROPERTY_COLUMN, column, null));
		}
		setColumnAttrSet();

	}

	public boolean setCounterField(Column column) {
		return tableFilterView.setCounterField(column);
	}

	public void clearColumns(GUIPosition browser) {
		TableColumnView[] array = this.columns
				.toArray(new TableColumnView[this.columns.size()]);

		for (TableColumnView item : array) {
			if (browser.equals(GUIPosition.ALL)
					|| browser.equals(item.getColumn().getBrowserId())) {
				removeColumn(item);
			}
		}
		refresh();
	}

	public int getColumnPos(Column column) {
		int pos = 0;
		if (column != null) {
			for (Iterator<TableColumnView> i = this.columns.iterator(); i
					.hasNext();) {
				TableColumnView item = i.next();
				if (item.getColumn().equals(column)) {
					return pos;
				}
				pos++;
			}
		}
		return 0;
	}

	public void removeColumn(TableColumnView column) {
		if (this.columns.remove(column)) {
			column.disposeColumn();
			onResizeColumn(column);
		}
	}

	public void addControl(Control control) {
		control.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false,
				3, 1));
	}
	
	protected void setColumnAttrSet(){
		LinkedHashSet<String> refreshColumns = new LinkedHashSet<String>();
		for (TableColumnView tableColumnView : columns) {
			if(tableColumnView.getColumn().getAttrName()!=null){
				refreshColumns.add(tableColumnView.getColumn().getAttrName());
			}
		}
		this.columnAttr = refreshColumns.toArray(new String[refreshColumns.size()]);
	}

	public void refresh(Object object) {
		
		refresh(object, columnAttr );
	}

	public void refresh(Object object, String[] columns) {
		if (getDisplay().getThread() != Thread.currentThread()) {
			getDisplay().asyncExec(new UpdateGUIThreadRefresh(this, object, columns));
			return ;
		}
		executeRefresh(object, columns);
	}
	
	public void executeRefresh(Object object, String[] columns){
		if (fixedTableViewerLeft != null) {
			fixedTableViewerLeft.update(object, columns);
		}
		if (tableViewer != null) {
			tableViewer.update(object, columns);
		}

	}


	public void refresh() {
		if (fixedTableViewerLeft != null) {
			fixedTableViewerLeft.refresh();
		}
		tableViewer.refresh();
		this.tableFilterView.refreshCounter();
	}

	public void refreshViewer() {
		if (fixedTableViewerLeft != null) {
			fixedTableViewerLeft.refresh();
		}
		tableViewer.refresh();

	}

	@Override
	public void handleEvent(Event event) {
		Point pt = new Point(event.x, event.y);
		Table table = tableViewer.getTable();
		TableItem currentItem = table.getItem(pt);

		if (SWT.MouseMove == event.type | SWT.MouseUp == event.type
				| SWT.MouseExit == event.type) {
			if (SWT.MouseUp == event.type) {
				ViewerCell cell = getTableViewer().getCell(pt);
				if (cell != null) {
					int columnIndex = cell.getColumnIndex();
					int offset = 0;
					if (event.widget == tableViewer.getTable()) {
						if (fixedTableViewerLeft != null) {
							offset = fixedTableViewerLeft.getTable()
									.getColumnCount();
						}
					}
					if (columnIndex + offset >= columns.size()) {
						return;
					}
					TableColumnView tableColumnView = columns.get(columnIndex
							+ offset);
					if (tableColumnView != null) {
						Composite parent = this;
						int x = event.x;
						int y = event.y;
						while (parent != null) {
							x += parent.getBounds().x;
							y += parent.getBounds().y;
							parent = parent.getParent();
						}
						Column column = tableColumnView.getColumn();
						if (column instanceof ColumnNotification) {
							((ColumnNotification) column).setSelection(this,
									currentItem, x, y);
						} else {
							column.setSelection(x, y);
						}

					}
					onSelection(table, table.getSelection());
				} else {
					// Deselect All
					selectNone();
					onSelection(table, table.getSelection());
				}
			}
			if (currentItem == null || currentItem.isDisposed()) {
				tableViewer.getTable().setCursor(defaultCursor);
			} else {
				boolean activ = false;
				for (int i = 0; i < columns.size(); i++) {
					TableColumnView tableViewerColumn = columns.get(i);
					Rectangle positem = currentItem.getBounds(i);
					if (positem != null) {
						if (event.x > positem.x
								&& event.x < (positem.x + positem.width)) {
							if (tableViewerColumn.getColumn()
									.isEditingSupport()) {
								this.activeItem = currentItem;
								activ = true;
								TableColumnLabelProvider activeCell = tableViewerColumn
										.getTableProvider();
								if (activeCell != null) {
									Color color = activeCell
											.getForgroundColorActiv();
									if (color != null) {
										this.activeItem.setForeground(i, color);
									}
									color = activeCell
											.getBackgroundColorActiv();
									if (color != null) {
										this.activeItem.setBackground(i, color);
									}
								}
								tableViewer.getTable().setCursor(handCursor);
							}
						}
					}
				}
				if (!activ) {
					tableViewer.getTable().setCursor(defaultCursor);
				}
			}
		} else if (SWT.KeyDown == event.type) {
			if (event.keyCode == SWT.CTRL
					|| (event.stateMask & SWT.CONTROL) != 0) {
				this.additionKey = SWT.CTRL;
				if (event.keyCode == 'a') {
					// Select all
					TableComponent.this.selectChange();
				}
			} else if (event.keyCode == SWT.SHIFT
					|| (event.stateMask & SWT.SHIFT) != 0) {
				this.additionKey = SWT.ALT;
			} else {
				this.additionKey = 0;
			}
		} else if (SWT.SELECTED == event.type) {
			// Notifiy Selection
			Table tableItem = (Table) event.widget;
			onSelection(tableItem, tableItem.getSelection());
		}
	}

	public void selectChange() {
		if (getSelectionItems().size() == this.getTableItemCount()) {
			this.selectNone();
		} else {
			this.selectAll();
		}
	}

	public void selectNone() {
		tableViewer.getTable().setSelection(new int[0]);
		refreshPosition();
	}

	public void selectAll() {
		int count = tableViewer.getTable().getItemCount();
		int[] array = new int[count];
		for (int i = 0; i < count; i++) {
			array[i] = i;
		}
		tableViewer.getTable().setSelection(array);
		refreshPosition();
	}

	public int getTableItemCount() {
		return tableViewer.getTable().getItemCount();
	}

	public ArrayList<Object> getSelectionItems() {
		ArrayList<Object> selecteditems = new ArrayList<Object>();
		for (TableItem item : getTable(GUIPosition.CENTER).getSelection()) {
			if (item.getData() != null) {
				selecteditems.add(item.getData());
			}
		}
		return selecteditems;
	}

	public void onResizeColumn(TableColumn column) {
		for (TableColumnView item : columns) {
			if (item.getTableColumn() == column) {
				onResizeColumn(item);
			}
		}
	}

	public void onResizeColumn(TableColumnView item) {
		if (item.getColumn().getBrowserId().equals(GUIPosition.WEST)) {
			int size = 0;
			for (TableColumnView view : columns) {
				if (view.getColumn().getBrowserId().equals(GUIPosition.WEST)) {
					if (view.getColumn().isVisible()) {
						size += view.getColumn().getWidth();
					}
				}
			}
			if (size == 0) {
				setVisibleFixedColumns(false);
			} else {
				setVisibleFixedColumns(true);
			}
			tableComposite.layout();
		}
	}

	public void onVisibleColumn(Column column, boolean value) {
		if (column.getBrowserId().equals(GUIPosition.WEST)) {
			if (value) {
				setVisibleFixedColumns(true);
			}
		}
	}

	public void removeSelectionItems() {
		TableItem[] selectionItems = getTable(GUIPosition.CENTER)
				.getSelection();
		
		if (selectionItems.length > 0) {
			Object[] items= new Object[selectionItems.length];
			int i=0;
			for (TableItem tableItem : selectionItems) {
				if(!tableItem.isDisposed()){
					items[i++]=(Object) tableItem.getData();
				}
			}
			for(int z=0;z<i;z++){
				removeItem(items[z]);
				if (fixedTableViewerLeft != null) {
					fixedTableViewerLeft.remove(items[z]);
				}
				if (tableViewer != null) {
					tableViewer.remove(items[z]);
				}
			}
		}
		getTable(GUIPosition.CENTER).redraw();
	}

	public int getColumnsSize() {
		return columns.size();
	}

	public void setSorting(String column, SortingDirection direction) {
		for (TableColumnView columnView : columns) {
			String value = columnView.getColumn().getAttrName();
			if (value != null && value.startsWith("\"")) {
				value = value.substring(1, value.length()-1);
			}
			if (value == null) {
				value = columnView.getColumn().getLabel();
			}
			if (value != null) {
				if (value.equalsIgnoreCase(column)) {
					list.setSort(value, direction);
					setSorting(columnView.getTableColumn(), direction,
							columnView.getColumnSorter());
					break;
				}
			}
		}
	}

	public void setSorting(TableColumn column, SortingDirection direction,
			ColumnViewerSorter sorter) {

		if (fixedTableViewerLeft != null) {
			setSorting(column, direction, fixedTableViewerLeft, sorter);
		}
		setSorting(column, direction, tableViewer, sorter);
	}

	private void setSorting(TableColumn column, SortingDirection direction,
			TableViewer viewer, ColumnViewerSorter sorter) {
		Table table = viewer.getTable();
		if (column.getParent() == table) {
			table.setSortColumn(column);
			if (direction == SortingDirection.ASC) {
				table.setSortDirection(SWT.UP);
			} else {
				table.setSortDirection(SWT.DOWN);
			}

		} else {
			table.setSortColumn(null);
			table.setSortDirection(SWT.NONE);
		}
		if (viewer.getComparator() != sorter) {
			viewer.setComparator(sorter);
		}
		refresh();
	}

	public void clear() {
		this.list.clear();
	}

	public Composite getTableComponent() {

		if (tableComposite == null) {
			sashForm = new SashForm(this, SWT.NONE);

			createContent(sashForm);
			sashForm.setMaximizedControl(tableComposite);
		}
		return sashForm;
	}

	public void clearColumns() {
		TableColumnView[] array = this.columns
				.toArray(new TableColumnView[this.columns.size()]);
		for (TableColumnView item : array) {
			removeColumn(item);
		}
	}
	
	public void addSelectionListener(ISelectionChangedListener listener){
		tableViewer.addSelectionChangedListener(listener);
		
	}

	public void notifiyCellEditor(JISMCellEditor editor, boolean active) {
		tableViewer.setInEditor(active);
	}
	
	@Override
	public void addKeyListener(KeyListener listener) {
		super.addKeyListener(listener);
		this.tableViewer.getTable().addKeyListener(listener);
		if(this.fixedTableViewerLeft!=null){
			this.fixedTableViewerLeft.getTable().addKeyListener(listener);
		}
	}
}
