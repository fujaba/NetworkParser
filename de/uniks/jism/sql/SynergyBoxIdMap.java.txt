package de.unikassel.synergybox.database;

import java.util.HashMap;
import java.util.WeakHashMap;

import org.hibernate.Session;
import org.sdmlib.serialization.IdMap;
import org.sdmlib.serialization.event.creater.DateCreator;
import org.sdmlib.serialization.event.creater.JsonArrayCreator;
import org.sdmlib.serialization.event.creater.JsonObjectCreator;
import org.sdmlib.serialization.event.creater.MapEntryCreator;
import org.sdmlib.serialization.interfaces.SendableEntityCreator;
import org.sdmlib.serialization.json.SDMLibJsonIdMap;

import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;

import de.SynergyBox.model.SynergyBoxEntity;
import de.unikassel.synergybox.core.SynergyBox;

public class SynergyBoxIdMap extends SDMLibJsonIdMap
{
	
	private Session currentSession;

	public void init()
	{
		if (creators.isEmpty())
		{
			addCreator(new de.SynergyBox.model.creators.SiemecaCreator());
			addCreator(new de.SynergyBox.model.creators.CommunicatorCreator());
			addCreator(new de.SynergyBox.model.creators.NetworkCreator());
			addCreator(new de.SynergyBox.model.creators.DeviceCreator());
			addCreator(new de.SynergyBox.model.creators.ConsumptionDataCreator());
			addCreator(new de.SynergyBox.model.creators.LocationCreator());
			addCreator(new de.SynergyBox.model.creators.PositionCreator());
			addCreator(new de.SynergyBox.model.creators.CollectorDevCreator());
			addCreator(new de.SynergyBox.model.creators.MeasureDevCreator());
			addCreator(new de.SynergyBox.model.creators.DataPointCreator());
			addCreator(new de.SynergyBox.model.creators.FixedDataheaderCreator());
			addCreator(new de.SynergyBox.model.creators.SynergyBoxEntityCreator());
			addCreator(org.sdmlib.models.pattern.creators.CreatorCreator
					.getCreatorSet());
			
			addCreator(new DateCreator());
			addCreator(new JsonObjectCreator());
			addCreator(new JsonArrayCreator());
			addCreator(new MapEntryCreator());
		}
	}
	
	public SynergyBoxIdMap(SynergyBox synergyBox)
	{
		this();
		
		currentSession = synergyBox.getCurrentSession();
	}
	
	public SynergyBoxIdMap()
	{
	// this.values = new WeakHashMap<String, Object>();
			// ConcurrentMap<String, Object> makeMap = new
			// MapMaker().weakValues().makeMap();
			
			Cache<String, Object> cache = CacheBuilder.newBuilder().weakValues()
					.build();
			
			this.values = cache.asMap();
			this.keys = new WeakHashMap<Object, String>();
			this.creators = new HashMap<String, SendableEntityCreator>();
			// add needed creators
			init();
	}

	@Override
	public String getId(Object obj)
	{
//		if (obj instanceof SynergyBoxEntity)
//		{
//			// check whether the object already has an id;
//			SynergyBoxEntity entity = (SynergyBoxEntity) obj;
//			final Integer id = entity.getId();
//			if (id != null)
//			{
////				keys.put(obj, id.toString());
//				return id.toString();
//			}
//			
//			// create an id
//			final String idString = super.getId(obj);
//			final int hash = idString.hashCode();
//			entity.set(IdMap.ID, hash);
//			
//			// save the object to database
//			
//			currentSession.beginTransaction();
//			currentSession.save(entity);
//			currentSession.getTransaction().commit();
//			return hash + "";
//		}
		// use common techniques if it is no SynergyBoxEntity
		return super.getId(obj);
	}
	
	@Override
	public Object getObject(String key)
	{
		Object object = super.getObject(key);
		
		if (object == null)
		{
			// try to resolve the matching object from database
			// TODO: find matching object
//			currentSession.beginTransaction();
//			currentSession.createQuery("");
//			currentSession.getTransaction().commit();
		}
		
		return object;
	}
	
}
