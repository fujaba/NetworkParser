def isReleaseBuild() {
	return gitVersion.isRelease();
}

if(project.hasProperty("signing.keyId")) {
	apply plugin: 'signing'

	signing {
		required { (isReleaseBuild() || gitVersion.isMaster() )&& gradle.taskGraph.hasTask("uploadArchives")}
		sign configurations.archives
	}

	uploadArchives {
		repositories {
			mavenDeployer {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

				repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}
				
				snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}

				pom{
					project {
						name 'NetworkParser'
						packaging 'jar'
						description 'Networkparser is a Framework for serialization to Json, XML and Byte.'
						url 'https://github.com/fujaba/Networkparser'

						scm {
							url 'scm:git@github.com:fujaba/Networkparser.git'
							connection 'scm:git@github.com:fujaba/Networkparser.git'
							developerConnection 'scm:git@github.com:fujaba/Networkparser.git'
						}

						licenses {
							license {
								name 'Licensed under the MIT'
								url 'https://opensource.org/licenses/MIT'
							}
					   }
						developers {
						   developer {
							   id 'zuendorf'
							   name 'Albert Zuendorf'
						   }
						   developer {
							   id 'slin'
							   name 'Stefan Lindel'
							   email 'Stefan@uni-kassel.de'
							}
						}
					}
					whenConfigured {
						p -> p.dependencies = p.dependencies.findAll { 
							dep -> dep.artifactId != "junit" 
						}
					}
			   }
			}
		}
	}
}