def isReleaseBuild() {
	return gitVersion.isRelease();
}
def writeFile() {
	if(project.hasProperty("signingSecretKeyRing")) {
		File file = File.createTempFile("secret", "gpg")
		FileOutputStream out = new FileOutputStream(file);
		out.write(convertKey("$System.env.signingSecretKeyRing"));
		ext.secretKeyRingFile=inputFile.getAbsolutePath()
		out.close();
	}
}
def convertKey(String value) {
	String hexVal = "0123456789ABCDEF"
	byte[] out = new byte[value.length() / 2]
	int n = value.length()
	for (int i = 0; i < n; i += 2) {
		int hn = hexVal.indexOf((int)value.charAt(i))
		int ln = hexVal.indexOf((int)value.charAt(i + 1))
		out[i / 2] = (byte) ((hn << 4) | ln)
	}
	out
}


if(project.hasProperty("signing.keyId")) {
	apply plugin: 'signing'

	writeFile()

	signing {
		required { (isReleaseBuild() || gitVersion.isMaster() )&& gradle.taskGraph.hasTask("uploadArchives")}
		sign configurations.archives
	}

	uploadArchives {
		repositories {
			mavenDeployer {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

				repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}
				
				snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}

				pom{
					project {
						name 'Networkparser'
						packaging 'jar'
						description 'Networkparser is a Framework for serialization to Json, XML and Byte.'
						url 'https://github.com/fujaba/Networkparser'

						scm {
							url 'scm:git@github.com:fujaba/Networkparser.git'
							connection 'scm:git@github.com:fujaba/Networkparser.git'
							developerConnection 'scm:git@github.com:fujaba/Networkparser.git'
						}

						licenses {
							license {
								name 'Licensed under the MIT'
								url 'https://opensource.org/licenses/MIT'
							}
					   }
						developers {
						   developer {
							   id 'zuendorf'
							   name 'Albert Zuendorf'
						   }
						   developer {
							   id 'slin'
							   name 'Stefan Lindel'
							}
						}
					}
					whenConfigured {
						p -> p.dependencies = p.dependencies.findAll { 
							dep -> dep.artifactId != "junit" 
						}
					}
			   }
			}
		}
	}
}