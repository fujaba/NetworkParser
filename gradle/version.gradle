import java.text.SimpleDateFormat

task JavaGit(type:JavaExec, dependsOn:compileJava) {
	
	errorOutput = System.err
	main = "de.uniks.networkparser.ext.git.GitRevision"
	classpath = (sourceSets.main.compileClasspath + sourceSets.main.output)
	ByteArrayOutputStream stdOutput = new ByteArrayOutputStream()
	standardOutput = stdOutput
	doLast {
		def slurper = new groovy.json.JsonSlurper()
		def result = slurper.parseText(stdOutput.toString())
		println result.get("branchname")
	}

}



ext{
	try{
		//buildAntCompile.execute()
		//buildAnt.execute()
		project.ext.Revisionnumber = Integer.parseInt(ant.Revisionnumber)
		if (project.hasProperty("branch")) {
			project.ext.Branchname = ant.Branchname + " " + project.get("branch")
		}else {
			project.ext.Branchname = ant.Branchname
		}
		project.ext.LastCommit = ant.LastCommit
		project.ext.GitTag = Integer.parseInt(ant.GitTag)
	}catch(Exception e) {
		println e
		project.ext.Revisionnumber = revisionNumber()
		if (project.hasProperty("branch")) {
			project.ext.Branchname = project.get("branch")
		} else {
			project.ext.Branchname = getWorkingBranch()
		}
		project.ext.LastCommit = getGitLastCommit()
		project.ext.GitTag = getGitTag()
	}
	gitVersion = new GITVersion(major: ext.majorNumber,minor: ext.GitTag, revision: ext.Revisionnumber, hash: ext.LastCommit, buildTime: buildTime(), branch: ext.Branchname, latest: project.hasProperty('latest'))
}
version = gitVersion
task version {
	group "Git"
	description "Show Final Version of Repository"
	doLast {
		println gitVersion

		println "Revisionnumber: "	+ project.ext.Revisionnumber
		println "Branchname: " 		+ project.ext.Branchname
		println "LastCommit: "		+ project.ext.LastCommit
		println "GitTag: "			+ project.ext.GitTag
	}
}

// Define a method using a closure as the method body
public class GITVersion {
	// MAJOR VERSION - Manually set
	int major = -1
	int minor = -1
	int revision = -1
	String buildTime
	String hash = ""
	String coverage = ""
	String branch
	String prefix = ""
	boolean latest

	String toString() {
		if (System.getenv().BUILD_NUMBER) {
			revision = System.getenv().BUILD_NUMBER as int
		}
		if(latest) {
			""
		} else if(!isRelease() && !isMaster()) {
			"$major.$minor.$revision${'-SNAPSHOT'}"
		} else {
			"$major.$minor.$revision"
		}
	}
	boolean isMaster() {
		return branch.contains("master")
	}
	boolean isRelease() {
		return branch.contains("release")
	}
}

def buildTime() {
	//def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'") //you can change it
	def df = new SimpleDateFormat("yyyyMMdd'T'HHmmss") //you can change it
	df.setTimeZone(TimeZone.getTimeZone("UTC"))
	return df.format(new Date())
}

def getGitTag() {
	def gittag=0
	def test = [0]
	execute("git", "tag").eachLine {
		try {
			def id = it.trim()
			def start = id.indexOf(".")
			if(start>0) {
				id = id.substring(start + 1)
				start = id.indexOf(".")
				if(start>0) {
					id = id.substring(0, start)
				}
			}
			test << (id as int)
		} catch (Exception ex) {
			// no problem as long as there's another tag with a number
		}
	}
	gittag = test.max()
	gittag
}
def getGitLastCommit() {
	def gittag=""
	execute("git", "log", "--pretty=format:\"%H\"", "-1").eachLine {
		gittag = it.trim()
	}
	gittag
}

def revisionNumber() {
	def count = 0
	execute("git", "log", "--oneline").eachLine {
		count = count + 1
	}
	if( count == 0) {
		count = -1
	}
	count
}
def getWorkingBranch() {
	// Triple double-quotes for the breaklines
	def commit, branch="", value
	execute("git", "rev-parse", "HEAD").eachLine {
		commit = it.trim()
		println "Commit: "+commit
		execute("git", "branch", "-r", "--contains", commit).eachLine {
			if(it.startsWith("* ")) {
				value = it.substring(1).trim()
			} else {
				value = it.trim()
			}
			if(value.lastIndexOf("/")>0) {
				value = value.substring(value.lastIndexOf("/")+1)
			}
			branch = branch + " "+value
		}
	}
	branch = branch.trim()
	println "Git-Branch: " + branch
	branch
}
