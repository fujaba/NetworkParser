import java.text.SimpleDateFormat


repositories {
	mavenCentral()
}
configurations {
	gitVersion{}
}
dependencies {
    gitVersion "org.eclipse.jgit:org.eclipse.jgit:[4,)"
	gitVersion "org.slf4j:slf4j-simple:1.6.1"
}

// Define a method using a closure as the method body
class GITVersion {
	// MAJOR VERSION - Manually set
	int major = -1
	int minor = -1
	int revision = -1
	String buildTime = ""
	String hash = ""
	String coverage = ""
	String branch = ""
	String prefix = ""
	boolean latest

	String toString() {
		if (System.getenv().BUILD_NUMBER) {
			revision = System.getenv().BUILD_NUMBER as int
		}
		if(latest) {
			""
		} else if(isRelease() == false && !isMaster()) {
			"$major.$minor.$revision${'-SNAPSHOT'}"
		} else {
			"$major.$minor.$revision"
		}
	}
	boolean isMaster() {
		if(branch == null) {
			return false;
		}
		return branch.contains("master")
	}
	boolean isRelease() {
		if(branch == null) {
			return false;
		}
		return branch.contains("release")
	}
}

task compileJava18(type: JavaCompile) {
	source = fileTree(dir: 'src', exclude: ['**/test/**'])
	destinationDir = file('build/classes/main18')
	sourceCompatibility = '1.8'
	targetCompatibility = '1.8'
	classpath = files('build/classes/main18')
}

task JavaGit(type:JavaExec, dependsOn: compileJava18) {
	doFirst {
		try {
			compileJava18.execute()
		}catch(Exception e) {
		}
	}
	errorOutput = System.err
	main = "de.uniks.networkparser.ext.DiagramEditor"
	args 'GIT', '3'
	classpath = (sourceSets.main.compileClasspath + sourceSets.main.output + files('build/classes/main18') + files(configurations.gitVersion))
	//.filter({it.name.indexOf("jgit")>=0})))

	ByteArrayOutputStream stdOutput = new ByteArrayOutputStream()
	standardOutput = stdOutput
	doLast {
		try {
			def slurper = new groovy.json.JsonSlurper()
			def json = slurper.parseText(stdOutput.toString())
			
			gitVersion.minor = json.get("minor")
			gitVersion.revision = json.get("revisionnumber")
			gitVersion.hash = json.get("lastcommit")
			gitVersion.buildTime = buildTime()
			gitVersion.branch = json.get("branchname")
		} catch(Exception e) {
			println e

			gitVersion.minor = getGitTag()
			gitVersion.revision = revisionNumber()
			gitVersion.hash = getGitLastCommit()
			gitVersion.buildTime = buildTime()
			if (project.hasProperty("branch")) {
				gitVersion.branch = project.get("branch")
			} else {
				gitVersion.branch = getWorkingBranch()
			}
			gitVersion.latest = getGitLastCommit() != null
		}
	}
}

task version() {
	doFirst{
		JavaGit.execute()
	}
	group "Git"
	description "Show Final Version of Repository"
	doLast {
		if(gitVersion != null) {
			println "Revisionnumber: "	+ gitVersion.revision
			println "Branchname: " 		+ gitVersion.branch
			println "LastCommit: "		+ gitVersion.hash
			println "GitTag: "			+ gitVersion.minor
		}
	}
}
ext {
	gitVersion = new GITVersion(major: ext.majorNumber)
	try {
		tasks.JavaGit.execute()
	} catch(e){
	}
	
}
version = gitVersion

def buildTime() {
	//def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'") //you can change it
	def df = new SimpleDateFormat("yyyyMMdd'T'HHmmss") //you can change it
	df.setTimeZone(TimeZone.getTimeZone("UTC"))
	return df.format(new Date())
}

def getGitTag() {
	def gittag=0
	def test = [0]
	execute("git", "tag").eachLine {
		try {
			def id = it.trim()
			def start = id.indexOf(".")
			if(start>0) {
				id = id.substring(start + 1)
				start = id.indexOf(".")
				if(start>0) {
					id = id.substring(0, start)
				}
			}
			test << (id as int)
		} catch (Exception ex) {
			// no problem as long as there's another tag with a number
		}
	}
	gittag = test.max()
	gittag
}
def getGitLastCommit() {
	def gittag=""
	execute("git", "log", "--pretty=format:\"%H\"", "-1").eachLine {
		gittag = it.trim()
	}
	gittag
}

def revisionNumber() {
	def count = 0
	execute("git", "log", "--oneline").eachLine {
		count = count + 1
	}
	if( count == 0) {
		count = -1
	}
	count
}
def getWorkingBranch() {
	// Triple double-quotes for the breaklines
	def commit, branch="", value
	execute("git", "rev-parse", "HEAD").eachLine {
		commit = it.trim()
		println "Commit: "+commit
		execute("git", "branch", "-r", "--contains", commit).eachLine {
			if(it.startsWith("* ")) {
				value = it.substring(1).trim()
			} else {
				value = it.trim()
			}
			if(value.lastIndexOf("/")>0) {
				value = value.substring(value.lastIndexOf("/")+1)
			}
			branch = branch + " "+value
		}
	}
	branch = branch.trim()
	println "Git-Branch: " + branch
	branch
}
