// MAJOR VERSION - Manually set
//----------------------
def majorNumber = 4
//group = 'de.uniks'
group = 'com.github.fujaba'
//----------------------

import java.text.SimpleDateFormat

task printVersion {
    doFirst {
        println "$version"
    }
}


ext{
	gitVersion = new GITVersion(major: majorNumber,minor: getGitTag(), revision: revisionNumber(), hash: revisionHash(), buildTime: buildTime(), release:project.hasProperty('ReleaseBuild'), branch: getWorkingBranch())
}
version = gitVersion

// Define a method using a closure as the method body
public class GITVersion {
	// MAJOR VERSION - Manually set
	int major = -1
	int minor = -1
	int revision = -1
	String buildTime
	String hash = ""
	boolean release = false
	String branch
	String prefix = ""

	String toString() {
		if (System.getenv().BUILD_NUMBER) {
			revision = System.getenv().BUILD_NUMBER as int
		}
		
		if(release == false && !isMaster()) {
			"$major.$minor.$revision${'-SNAPSHOT'}"
		} else {
			"$major.$minor.$revision"
		}
    }
	
	boolean isMaster() {
		return branch.contains("master")
	}
}

/*
 * Execute Command with Parameter
 *
 * @return the Result of Command
 */
def executeCommand(String[] args) {
	def pb = new ProcessBuilder(args)
	def result = ""
	InputStream is = null
	ByteArrayOutputStream stdout
	try {
		def prs = pb.start()
		is = prs.getInputStream();
		byte[] b = new byte[1024];
		int size = 0;
		stdout = new ByteArrayOutputStream();
		while((size = is.read(b)) != -1){
			stdout.write(b, 0, size);
		}
		result = stdout.toString()
	} catch (Exception e) {
	} finally{
		try {
			if(is != null) is.close();
			if(stdout != null) stdout.close();
		} catch (Exception ex){}
	}
	result
}

def getGitTag() {
	def gittag=-1
	def test = [-1]
	executeCommand("git", "tag").eachLine {
		try {
			test << (it.trim() as int)
		} catch (Exception ex) {
			// no problem as long as there's another tag with a number
		}
	}
	gittag = test.max()
	println "Git-Tag: " + gittag
	gittag
}

def revisionNumber() {
	def count = 0
	executeCommand("git", "log", "--oneline").eachLine {
		count = count + 1
	}
	println "RevisionNumber: " + count
	count
}

def revisionHash() {
    def gitFolder = "$projectDir/.git/"
    def takeFromHash = 12

    def head = new File(gitFolder + "HEAD").text.split(":")
    def isCommit = head.length == 1
 
    if(isCommit) return head[0].trim().take(takeFromHash)
 
    def refHead = new File(gitFolder + head[1].trim())
    refHead.text.trim().take takeFromHash
}
def buildTime() {
	//def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'") //you can change it
	def df = new SimpleDateFormat("yyyyMMdd'T'HHmmss") //you can change it
	df.setTimeZone(TimeZone.getTimeZone("UTC"))
	return df.format(new Date())
}

/*
 * Get the name of the working branch of the project
 *
 * @return Name of the working branch
 */
def getWorkingBranch() {
    // Triple double-quotes for the breaklines
	def commit, branch="", value
	executeCommand("git", "rev-parse", "HEAD").eachLine {
		commit = it.trim()
		println "Commit: "+commit
		executeCommand("git", "branch", "-r", "--contains", commit).eachLine {
	        if(it.startsWith("* ")) {
				value = it.substring(1).trim()
			} else {
				value = it.trim()
			}
			if(value.lastIndexOf("/")>0) {
				value = value.substring(value.lastIndexOf("/")+1)
			}
			branch = branch + " "+value
		}
	}
	branch = branch.trim()
	println "Git-Branch: " + branch
	branch
}