// MAJOR VERSION - Manually set
//----------------------
def majorNumber = 4
group = 'de.uniks'
//----------------------

import java.text.SimpleDateFormat

task printVersion {
    doFirst {
        println "$version"
    }
}

version = new GITVersion(major: majorNumber,minor: getGitTag(), revision: revisionNumber(), hash: revisionHash(), buildTime: buildTime(), lecture: project.hasProperty('lectureBuild'), isFX: project.hasProperty('NetworkParserFX'))

ext{
	gitVersion = new GITVersion(major: majorNumber,minor: getGitTag(), revision: revisionNumber(), hash: revisionHash(), buildTime: buildTime() )
}

// Define a method using a closure as the method body
public class GITVersion {
	// MAJOR VERSION - Manually set
    int major = -1
    int minor = -1
    int revision = -1
	
	String buildTime
    String hash = ""
    // change, if release is needed some day: boolean release
    // also change version above to accept release property
    boolean release = false
	boolean lecture
	boolean isFX
	String prefix = ""

    String toString() {
		if (System.getenv().BUILD_NUMBER) {
			revision = System.getenv().BUILD_NUMBER as int
		}
		if(isFX) {
			prefix = "FX"
		}
		
		"$major.$minor.$revision${release ? '' : '-SNAPSHOT'}"
    }
}

def getGitTag() {
	try {
		def stdout = new ByteArrayOutputStream()
		exec {
			commandLine 'git', 'tag'
			standardOutput = stdout
		}

		def test = []
	
		stdout.toString().eachLine {
			try {
				test << (it.trim() as int)
			} catch (Exception ex) {
				// no problem as long as there's another tag with a number
				//ex.printStackTrace()
			}
		}
		test.max()
	} catch (Exception e) {
		e.printStackTrace()
		-1
	}
}

def revisionNumber() {
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'log', '--oneline'
			standardOutput = stdout
	}
	def count = 0
	stdout.toString().eachLine {
		count = count + 1
	}
	count
}

def revisionHash() {
    def gitFolder = "$projectDir/.git/"
    def takeFromHash = 12

    def head = new File(gitFolder + "HEAD").text.split(":")
    def isCommit = head.length == 1
 
    if(isCommit) return head[0].trim().take(takeFromHash)
 
    def refHead = new File(gitFolder + head[1].trim())
    refHead.text.trim().take takeFromHash
}
def buildTime() {
	//def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'") //you can change it
	def df = new SimpleDateFormat("yyyyMMdd'T'HHmmss") //you can change it
	df.setTimeZone(TimeZone.getTimeZone("UTC"))
	return df.format(new Date())
}