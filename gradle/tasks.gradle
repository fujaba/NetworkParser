gradle.projectsEvaluated {
    compileJava.dependsOn(compileJava16)
	compileJava.dependsOn(compileJava17)
}

ext.sharedManifest = manifest {
   attributes 'Specification-Version': gitVersion.major+"."+gitVersion.minor+"."+gitVersion.revision,
			'Implementation-Title': 'Networkparser',
			'Specification-Title': 'Networkparser',
			'Built-Time': gitVersion.buildTime,
			'Created-By': gitVersion.major+"."+gitVersion.minor+"."+gitVersion.revision+" "+System.properties['user.name'],
			'Built-By': "${System.properties['user.name']}",
			'Location': "${System.properties['user.language']}",
			'Version': gitVersion.revision,
			'Author': 'Stefan Lindel',
			'Implementation-Version': gitVersion.major+"."+gitVersion.minor+"."+gitVersion.revision,
			'GIT-Revision': gitVersion.revision,
			'Java-Version': "${System.properties['java.version']}",
			'Bundle-Description': 'NetworkParser',
			'Bundle-ClassPath': '.'
}

jar {
	group "Jar"
	exclude '**/javafx/**'
	exclude '**/test/**'
	from sourceSets.main.output
	manifest = project.manifest {from sharedManifest}
}

task compileJava16(type: JavaCompile) {
	source = fileTree(dir: 'src', exclude: ['**/javafx/**', '**/test/**'])
	destinationDir = file('build/classes/main16')
	sourceCompatibility = '1.6'
	targetCompatibility = '1.6'
	classpath = files('build/classes/main16')
}
task compileJava17(type: JavaCompile) {
	source = fileTree(dir: 'src', exclude: ['**/javafx/**', '**/test/**'])
	destinationDir = file('build/classes/main17')
	sourceCompatibility = '1.7'
	targetCompatibility = '1.7'
	classpath = files('build/classes/main17')
}

task buildCoreJar(type: Jar) {
	description 'Build Jar with NetworkParser-Core without dependency of JavaFX and Reflection'
	group "Jar"
	from sourceSets.main.output
	exclude '**/test/**'
	manifest = project.manifest {from sharedManifest}
}

task buildCoreJar16(type: Jar) {
	from fileTree(dir: 'build/classes/main16'); classifier = 'core16'
	manifest = project.manifest {from sharedManifest}
}

task buildCoreJar17(type: Jar) {
	from fileTree(dir: 'build/classes/main17'); classifier = 'core17'
	manifest = project.manifest {from sharedManifest}
}

task buildSourceJar(type: Jar) {
	description 'Build Jar with class-Files and Source-Files'
	group "Jar"
	from (sourceSets.main.allJava + sourceSets.main.output); classifier = 'sources'
	exclude '**/test/**'
	manifest = project.manifest {from sharedManifest}
}

task buildJavadoc(type: Jar) {
	description 'Build JavaDoc Jar'
	group "Jar"
	from javadoc.outputs.files; classifier = 'javadoc'
	exclude '**/test/**'
	manifest = project.manifest {from sharedManifest}
}

task buildFullJar(type: Jar) {
	description 'Build FullJar with Class-Files, Source-Files and JavaDoc'
	group "Jar"
	from {(sourceSets.main.output + sourceSets.main.allJava + javadoc.outputs.files )}; classifier = 'full'
	exclude '**/test/**'
	manifest = project.manifest {from sharedManifest}
}

task buildAll(type: Jar) {
	description 'Build All Jars'
	group "Jar"
	exclude '**/javafx/**'
	exclude '**/test/**'
	from sourceSets.main.output
}
buildAll.dependsOn buildCoreJar, buildCoreJar16, buildCoreJar17, buildSourceJar, buildJavadoc, buildFullJar
