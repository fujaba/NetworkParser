gradle.projectsEvaluated {
	compileJava.dependsOn(compileJava16)
	compileJava.dependsOn(compileJava17)
	test.dependsOn(FinishTest)
}

ext.sharedManifest = manifest {
	attributes 'Specification-Version': gitVersion.major+"."+gitVersion.minor+"."+gitVersion.revision,
			'Implementation-Title': 'Networkparser',
			'Specification-Title': 'Networkparser',
			'Built-Time': gitVersion.buildTime,
			'Created-By': gitVersion.major+"."+gitVersion.minor+"."+gitVersion.revision+" "+System.properties['user.name'],
			'Build': (System.getenv("BUILD_NUMBER") ?: "IDE"),
			'Built-By': "${System.properties['user.name']}",
			'Location': "${System.properties['user.language']}",
			'Version': gitVersion.revision,
			'Author': 'Stefan Lindel',
			'Implementation-Version': gitVersion.major+"."+gitVersion.minor+"."+gitVersion.revision,
			'GIT-Revision': gitVersion.revision,
			'Hash': gitVersion.hash,
			'Java-Version': "${System.properties['java.version']}",
			'Bundle-Description': 'NetworkParser',
			'Licence': 'MIT and Apache License 2.0',
			'Homepage': 'https://github.com/fujaba/Networkparser',
			'scm': 'git@github.com/fujaba/Networkparser.git',
			'Coverage': gitVersion.coverage,
			'Bundle-ClassPath': '.'
}

task compileJava16(type: JavaCompile) {
	source = fileTree(dir: 'src', exclude: ['**/test/**'])
	destinationDir = file('build/classes/main16')
	sourceCompatibility = '1.6'
	targetCompatibility = '1.6'
	classpath = files('build/classes/main16')
}
task compileJava17(type: JavaCompile) {
	source = fileTree(dir: 'src', exclude: ['**/test/**'])
	destinationDir = file('build/classes/main17')
	sourceCompatibility = '1.7'
	targetCompatibility = '1.7'
	classpath = files('build/classes/main17')
}

jar {
	group "Jar"
	exclude '**/test/**'
	from sourceSets.main.output
	manifest = project.manifest {from sharedManifest}
}

task buildCoreJar16(type: Jar, dependsOn: jar) {
	group "Jar"; from fileTree(dir: 'build/classes/main16'); classifier = 'core16'
	manifest = project.manifest {from sharedManifest}
}

task buildCoreJar17(type: Jar, dependsOn: buildCoreJar16) {
	group "Jar"; from fileTree(dir: 'build/classes/main17'); classifier = 'core17'
	manifest = project.manifest {from sharedManifest}
}
task buildCoreJar18(type: Jar, dependsOn: buildCoreJar17) {
	description 'Build Jar with NetworkParser-Core without dependency of JavaFX and Reflection'
	group "Jar";from sourceSets.main.output; classifier = 'core18';
	excludes = ['**/test/**']
	manifest = project.manifest {from sharedManifest}
}
task buildMinCoreJar(type: Jar) {
	description 'Build Minimum-Jar with NetworkParser-Core without dependency of JavaFX and Reflection'
	group "Jar";from sourceSets.main.output; classifier = 'min';
	excludes = ['**/ext/**', '**/calculator/**', '**/parser/**', '**/logic/**', '**/**.css', '**/**.js', '**/gui/**','**/test/**']
	manifest = project.manifest {from sharedManifest}
}
task buildSourceJar(type: Jar, dependsOn: buildCoreJar18) {
	description 'Build Jar with class-Files and Source-Files'
	group "Jar"; from {(sourceSets.main.output + sourceSets.main.allJava)}; classifier = 'sources'
	exclude '**/test/**'
	manifest = project.manifest {from sharedManifest}
}
task buildJavadoc(type: Jar, dependsOn: buildSourceJar) {
	description 'Build JavaDoc Jar'
	group "Jar"; from javadoc.outputs.files; classifier = 'javadoc'
	exclude '**/test/**'
	manifest = project.manifest {from sharedManifest}
}

task cleanupws(type: Delete) {
	description 'Delete Configuration Files from Workspace'
	group "BUILD"
	delete 'gradle.properties'
	delete fileTree(dir: ".", include: "*.gpg")
}
task FinishTest() {
	if (new File("${buildDir}/jacoco/report.csv").exists()) {
		String fileContents = new File("${buildDir}/jacoco/report.csv").text
		int[] sum = new int[10]
		//GROUP,PACKAGE,CLASS,INSTRUCTION_MISSED,INSTRUCTION_COVERED,BRANCH_MISSED,BRANCH_COVERED,LINE_MISSED,LINE_COVERED,COMPLEXITY_MISSED,COMPLEXITY_COVERED,METHOD_MISSED,METHOD_COVERED
		fileContents.eachLine {
			String[] item = it.split(",")
			for(int i=0;i<10;i++) {
				try {
					sum[i] += Integer.valueOf(item[i + 3])
				}catch(Exception e) {}
			}
		}
		StringBuilder sb=new StringBuilder()
		sb.append "{INSTRUCTION:\""+sum[0]+"/"+(sum[0]+sum[1])+"\","
		sb.append " BRANCH:\""+sum[2]+"/"+(sum[2]+sum[3])+"\","
		sb.append " LINE:\""+sum[4]+"/"+(sum[4]+sum[5])+"\","
		sb.append " COMPLEXITY:\""+sum[6]+"/"+(sum[6]+sum[7])+"\","
		sb.append " METHOD:\""+sum[8]+"/"+(sum[8]+sum[9])+"\"}"
		sharedManifest.getAttributes().put("Coverage", sb.toString())
		project.ext.coverage = sb.toString()
	}
}

